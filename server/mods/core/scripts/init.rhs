create_item().on_right_click(|player,target|{
    if type_of(target) == "BlockPosition"{
        if !player.get_entity().is_shifting(){
            player.user_data[Identifier("core:first_selection")] = target;
            player.send_chat_message("first point selected at " + target);
        } else {
            player.user_data[Identifier("core:second_selection")] = target;
            player.send_chat_message("second point selected at " + target);
        }
    }
}).client_name("Selection Wand").register("core:selection_wand");
register_event("bb:keyboard", ||{
    let player = this.player;
    let key = this.key;
    if !this.pressed {
        return;
    }
    if key == KeyboardKey::Tab{
        if player.get_open_inventory() != (){
            player.close_inventory();
        } else {
            let creative_inventory = create_inventory(27);
            creative_inventory.user_data["core:page"] = 0;
            creative_inventory.set_client_property("core:page", 0);
            for (item,i) in list_items(){
                if i >= 27{
                    break;
                }
                let item = ItemStack(item, 1);
                item.count = item.get_stack_size();
                creative_inventory.full_view().set_item(i, item);
            }
            player.open_inventory(creative_inventory, 0..27, "core:layout_creative", |viewer,id,value,old_value|{
                if id == "core:page"{
                    viewer.set_text("page", "page: " + value);
                }
            }, |viewer, view, id, btn, shift|{
                if type_of(id) == "string" {
                    let user_data = view.get_inventory().user_data;
                    let page = user_data["core:page"];
                    if id == "next"{
                        page += 1;
                    } else if id == "previous" {
                        page -= 1;
                    }
                    let page = max(page,0);
                    user_data["core:page"] = page;
                    view.get_inventory().set_client_property("core:page", page);
                    for i in 0..27{
                        creative_inventory.full_view().set_item(i, ());
                    }
                    for (item,i) in list_items(){
                        if i/27 == page{
                            let item = ItemStack(item, 1);
                            item.count = item.get_stack_size();
                            creative_inventory.full_view().set_item(i%27, item);
                        }
                    }
                } else {
                    if player.get_hand_item() == (){
                        player.set_hand_item(view.get_item(id));
                    } else {
                        player.set_hand_item(());
                    }
                    return InteractionResult::Consumed;
                }
            }, |player, view, id, x, y, shift|{
                if type_of(id) == "number" {
                    let item = player.get_hand_item();
                    if item != () {
                        item.count += y;
                        player.set_hand_item(item);
                    } else {
                        if y > 0{
                            let item = view.get_item(id);
                            if item != (){
                                player.set_hand_item(item.with_count(1));
                            }
                        }
                    }
                    return InteractionResult::Consumed;
                }
            });
        }
    }
});
register_event("bb:command", ||{
    let command = this.command;
    let player = this.player;
    if command[0] == "/copy"{
        let first_selection = player.user_data[Identifier("core:first_selection")];
        let second_selection = player.user_data[Identifier("core:second_selection")];
        if type_of(first_selection) == (){
            player.send_chat_message("first point not selected");
            return;
        }
        if type_of(second_selection) == (){
            player.send_chat_message("second point not selected");
            return;
        }
        let entity = player.get_entity();
        player.user_data[Identifier("core:structure_selection")] = entity.get_location().world.get_structure(first_selection,second_selection,entity.get_location().position.to_block_position());
        player.send_chat_message("structure saved");
    }
    if command[0] == "/export"{
        let block_structure = player.user_data[Identifier("core:structure_selection")];
        block_structure.export_structure(command[1] + ".json");
        player.send_chat_message("structure exported");
    }
    if command[0] == "setblock" {
        let world = player.get_entity().get_location().world;
        world.set_chat_block(BlockPosition(parse_int(command[1]),parse_int(command[2]),parse_int(command[3])), BlockState(command[4]));
    }
    if command[0] == "eval"{
        command.remove(0);
        eval(command.reduce(|total,cmd|total+" "+cmd,""));
    }
    if command[0] == "creative"{
        switch command[1]{
            "true" => {
                player.creative(true);
                player.send_chat_message("You are now in creative");
            }
            "false" => {
                player.creative(false);
                player.send_chat_message("You are no longer in creative");
            }
            _ => {}
        }
    }
    if command[0] == "movetype"{
        switch command[1]{
            "noclip" => {
                player.movement_type(MovementType::NoClip);
                player.send_chat_message("You are now in noclip");
            }
            "fly" => {
                player.movement_type(MovementType::Fly);
                player.send_chat_message("You are now flying");
            }
            "normal" => {
                player.movement_type(MovementType::Normal);
                player.send_chat_message("You are now moving normally");
            }
            _ => {}
        }
    }
    if command[0] == "speed"{
        let speed = parse_float(command[1]);
        player.speed(speed);
        player.send_chat_message("You are moving at speed of " + speed);
    }
});


create_entity().client_viewmodel("core:viewmodel", "").client_viewmodel_add_item("main_hand").client_viewmodel_add_animation("equip").client_model("core:player","core:player").client_add_item("main_hand").client_hitbox(0.6, 1.7, 0.6).register("core:player");

register_image("core:animation_test", "images/animation_test.png");

register_image("bb:slot", "images/slot.png");
register_image("bb:cursor", "images/cursor.png");

register_image("core:previous", "images/previous.png");
register_image("core:next", "images/next.png");

register_image("core:player", "images/player.png");
register_model("core:player", "models/player.bbm");
register_model("core:viewmodel", "models/viewmodel.bbm");

register_sound("core:equip", "sounds/equip.wav");

register_event("bb:player_join", ||{this.entity = Entity("core:player", this.location);});

register_event("bb:post_player_join", ||{
    this.player.movement_type(MovementType::Normal);
    this.player.speed(1.);
});

let animated_texture = create_animated_texture("core:animation_test", 60, 4);
create_block(|p|{
    create_cube(animated_texture,animated_texture,animated_texture,animated_texture,animated_texture,animated_texture)
}).register("core:animation_test").register_item("core:animation_test","Animation Test Block");